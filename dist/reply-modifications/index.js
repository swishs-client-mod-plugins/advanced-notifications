(()=>{var r=adn.patcher;var A=adn.apis.Settings,{create:n}=adn.apis.Settings;var u=n("reply-modifications"),{byDisplayName:i,byProps:F}=Webpack.Filters,[{marginTop20:l},a,h,U]=Webpack.bulk(F("marginTop20"),i("FormItem"),i("RadioGroup"),i("FormDivider"),i("SwitchItem"));var f=()=>{let[o,m]=u.use("incoming",0),[g,d]=u.use("outgoing",0);return React.createElement(React.Fragment,null,React.createElement(a,{tag:a.Tags.H5,title:"Incoming Replies (messages sent by other users)"},React.createElement(h,{value:o,onChange:({value:t})=>void m(t),options:[{name:"Default Behavior",desc:"Do not change the behavior of incoming replies.",value:0},{name:"Force Mentions",desc:"Force all incoming replies to your messages to ping you.",value:1},{name:"Suppress Mentions",desc:"Force all incoming replies to your messages to not ping you.",value:2}]})),React.createElement(U,{className:l}),React.createElement(a,{tag:a.Tags.H5,className:l,title:"Outgoing Replies (messages sent by you)"},React.createElement(h,{value:g,onChange:({value:t})=>void d(t),options:[{name:"Always On",desc:"This is the default behavior for outgoing replies.",value:0},{name:"Remember Choice",desc:"Save your last choice and use that as the outgoing behavior.",value:1},{name:"Always Off",desc:"Always toggle off outgoing replies.",value:2}]})))};var c=n("reply-modifications"),b=Webpack.common.Dispatcher,S=Webpack.getByProps("createPendingReply"),v=Webpack.getModule(o=>o.getName?.()==="UserStore"),y;(t=>{let o=[];function m(){o.push(r.before(b,"_dispatch",([{message:e,type:E}])=>{if(E!=="MESSAGE_CREATE")return;let s=v.getCurrentUser();if(!s||!Array.isArray(e.mentions)||!e.referenced_message)return;let p=e.mentions.findIndex(R=>R.id===s.id);switch(c.get("incoming",0)){case 1:e.referenced_message.author.id===s.id&&p===-1&&e.mentions.push(e.referenced_message.author);break;case 2:e.referenced_message.author.id===s.id&&p>-1&&e.mentions.splice(p,1)}})),o.push(r.before(S,"createPendingReply",([e])=>{switch(c.get("outgoing",0)){case 1:e.shouldMention=c.get("lastMention",!0);break;case 2:e.shouldMention=!1}})),o.push(r.before(S,"setPendingReplyShouldMention",([,e])=>{c.set("lastMention",e)}))}t.start=m;function g(){o.forEach(e=>e&&e())}t.stop=g,t.settings=f})(y||={});var O=y;})();
//# sourceMappingURL=data:application/json;base64,
